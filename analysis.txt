So in this program, there are two different algorithms being implemented. In order to determine the efficiency of both algorithms, I had to look at the worst case scenario for each. This leads us to see how many times each algorithm has to loop through all the variables being handled in the program.

In the Insertion Sort algorithm, the program runs through all the variables twice, leading to a n^2 big-O. It first loops through a while loop that requires it to check each variable. Then, it has a comparison between that selected integer and each other integer in the array. This means that at the worst case, where the array is completely backwards order, it loops through all integers and compares it to all integers. This loops n times * n times, or n^2.

The Bubble Sort algorithm also runs through the variables in its array twice, so it also has a big-O of n^2. It runs through two while loops in the program. The first while loop looped through every integer, then the second loop runs through the remaining integers it needs to be compared to, everything to the right of it in the array. After this process, the algorithm has looped n times twice, with the big-O of n^2.
